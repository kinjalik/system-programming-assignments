------------------------------------------------------------------
File system.
Language: C.
Deadline: 2 weeks.
------------------------------------------------------------------

Need to implement own file system in memory. Don't be afraid, it
is not too complex. For start you are given a template of the FS
interface with some pre-implemented structures, in files userfs.h
and userfs.c.

The file system is called UserFS, and it is very primitive. It has
no folders - all files are in "root". Files can be created,
deleted, opened, closed. Each file's structure is similar to the
file system FAT: it is a block list. In userfs.c you can look up
structures which describe a block and a file storing a list of
blocks. The blocks have fixed size, file size is limited.

Nothing is stored on disk - all is in the main memory, on the
heap. Files can be read/written-to by their descriptors. API
strongly resembles the one from libc:

int
ufs_open(const char *filename, int flags);

ssize_t
ufs_write(int fd, const char *buf, size_t size);

ssize_t
ufs_read(int fd, char *buf, size_t size);

int
ufs_close(int fd);

int
ufs_delete(const char *filename);

You can read complete descriptions of those functions in userfs.h.

Your main task - implement growing of a file while new data is
being written, and you need to implement a file descriptor. Lets
inspect a couple of examples.

There is code:

        int fd = ufs_open("any_file_name", UFS_CREATE);

After this line inside userfs.c is created a struct file with a
name "any_file_name", if it doesn't exist yet. Then is created a
file descriptor struct filedesc.

        const char *data = "bla bla bla";
        ufs_write(fd, data, strlen(data));

The file is empty, it has no blocks, so you have to allocate the
needed number of struct blocks. In this case it is just 1. The
data is copied into there. The file looks like this now:

        file:
        +---------------------+
        | bla bla bla|        | -> NULL.
        +---------------------+
                     ^
                  filedesc - descriptor points here. For example,
                             in the descriptor you can store a
                             block number and offset in it.

Then I keep writing but more data this time:

        char buf[1024];
        memset(buf, 0, sizeof(buf));
        ufs_write(fd, buf, sizeof(buf));

This is how it looks now:

        file:
        +---------------------+    +---------------------+
        | bla bla bla 0 0 0 0 | -> | 0 0 0 0 0 0 0 0 0 0 | ->
        +---------------------+    +---------------------+

        +---------------------+
     -> | 0 0 0 0 0 0|        | -> NULL.
        +---------------------+
                     ^
                  filedesc

The first block was filled to the end, and 2 new blocks were
created. They were just appended to the end of the list.

Same with the reading - a descriptor reads sequentially, jumping
to a next block when the previous one is fully read.

Since the task is to implement a library, there is no 'main'
function and no input from anywhere. You can write tests in C in a
separate file with 'main' and which will 'include' your solution.
For example, make a file main.c, add 'include "userfs.h"', and in
the function 'main' you do tests. It can all be built like this:

        gcc userfs.c main.c

Possible solutions:

- 15 points: implement all functions from userfs.c, like described
  above.

- +5 points: implement file opening modes: for reading, writing,
  read-writing. Then a file is opened, the descriptor stores the
  mode. When is called a function read/write, the mode is checked.
  This is it. The flags have to be called UFS_READ_ONLY,
  UFS_WRITE_ONLY, UFS_READ_WRITE. By default the file has to be
  opened with UFS_READ_WRITE. In case of an error your have to set
  the code UFS_ERR_NO_PERMISSION.

- +5 points: implement resize. There is a function

  ufs_resize(int fd, size_t new_size)

  It increases or reduces file size. If a file is shrinking and
  some file descriptors start pointing beyond file end, they are
  moved to the new end.

The additional options for +5 points do not include each other.
That is, you can do none, or do only one, or do only another, or
both for +10.
